"""
AI-IdeaFactory: Telegram Bot –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–∏–¥–µ–π
Webhook –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Cloudflare Tunnel
"""

import os
import logging
import json
from flask import Flask, request
from dotenv import load_dotenv
import telebot
from telebot import types

from ai_client import OpenRouterClient

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL_BASE = os.getenv("WEBHOOK_URL", "https://your-tunnel-url.trycloudflare.com")
WEBHOOK_URL_PATH = f"/{TELEGRAM_TOKEN}"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è webhook)
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=False)

# –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
ai_client = OpenRouterClient()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = {}


class UserState:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    WAITING_NICHE = 1
    WAITING_GOAL = 2
    WAITING_FORMAT = 3
    WAITING_IDEA_SELECTION = 4


def get_user_state(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_data_store.get(user_id, {}).get('state', None)


def set_user_state(user_id, state):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data_store:
        user_data_store[user_id] = {}
    user_data_store[user_id]['state'] = state


def get_user_data(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data_store:
        user_data_store[user_id] = {}
    return user_data_store[user_id]


@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.chat.id
    logger.info(f"User {user_id} started the bot")
    
    welcome_text = (
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-IdeaFactory!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–∏–¥—É–º–∞—Ç—å –∫—Ä—É—Ç—ã–µ –∏–¥–µ–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è AI.\n\n"
        "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–µ–π –Ω–∏—à–µ\n"
        "2Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ 5 –≥–æ—Ç–æ–≤—ã—Ö –∏–¥–µ–π\n"
        "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ—é –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç\n\n"
        "üìå –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É <b>–Ω–∏—à—É</b> "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏—Ç–Ω–µ—Å, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –±–∏–∑–Ω–µ—Å, –±–ª–æ–≥–∏ –∏ —Ç.–¥.):"
    )
    
    set_user_state(user_id, UserState.WAITING_NICHE)
    bot.send_message(user_id, welcome_text, parse_mode='HTML')


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.WAITING_NICHE)
def handle_niche(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏—à–∏"""
    user_id = message.chat.id
    niche = message.text.strip()
    
    if not niche or len(niche) < 2:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–∏—à—É (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    data = get_user_data(user_id)
    data['niche'] = niche
    
    logger.info(f"User {user_id} selected niche: {niche}")
    
    goal_text = (
        f"‚úÖ <b>–ù–∏—à–∞:</b> {niche}\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–≤–ª–µ—á—å –∞—É–¥–∏—Ç–æ—Ä–∏—é, –æ–±—É—á–∏—Ç—å, –ø—Ä–æ–¥–∞—Ç—å, —Ä–∞–∑–≤–ª–µ—á—å)"
    )
    
    set_user_state(user_id, UserState.WAITING_GOAL)
    bot.send_message(user_id, goal_text, parse_mode='HTML')


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.WAITING_GOAL)
def handle_goal(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏"""
    user_id = message.chat.id
    goal = message.text.strip()
    
    if not goal or len(goal) < 2:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª—å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    data = get_user_data(user_id)
    data['goal'] = goal
    
    logger.info(f"User {user_id} selected goal: {goal}")
    
    format_text = (
        f"‚úÖ <b>–¶–µ–ª—å:</b> {goal}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, —Å—Ç–∞—Ç—å—è, –≤–∏–¥–µ–æ, —Ä–∏–ª—Å, –∫–∞—Ä—É—Å–µ–ª—å)"
    )
    
    set_user_state(user_id, UserState.WAITING_FORMAT)
    bot.send_message(user_id, format_text, parse_mode='HTML')


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == UserState.WAITING_FORMAT)
def handle_format(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π"""
    user_id = message.chat.id
    content_format = message.text.strip()
    
    if not content_format or len(content_format) < 2:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    data = get_user_data(user_id)
    data['format'] = content_format
    
    logger.info(f"User {user_id} selected format: {content_format}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = bot.send_message(
        user_id,
        "‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∞—Å...</b>\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥ ‚è±Ô∏è",
        parse_mode='HTML'
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        ideas = loop.run_until_complete(ai_client.generate_ideas(
            niche=data['niche'],
            goal=data['goal'],
            content_format=content_format
        ))
        loop.close()
        
        if not ideas or not isinstance(ideas, list):
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"Failed to generate ideas for user {user_id}")
            return
        
        data['ideas'] = ideas
        logger.info(f"Generated {len(ideas)} ideas for user {user_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            bot.delete_message(user_id, processing_msg.message_id)
        except Exception:
            pass
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–¥–µ–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ideas_text = "üé® <b>–í–æ—Ç 5 –∏–¥–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n\n"
        for idx, idea in enumerate(ideas[:5], 1):
            title = idea.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = idea.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            ideas_text += f"<b>üí° –ò–¥–µ—è {idx}:</b>\n<i>{title}</i>\n{description}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup()
        for idx in range(min(5, len(ideas))):
            button = types.InlineKeyboardButton(
                f"üí° –ò–¥–µ—è {idx + 1}",
                callback_data=f"idea_{idx}"
            )
            markup.add(button)
        
        set_user_state(user_id, UserState.WAITING_IDEA_SELECTION)
        bot.send_message(user_id, ideas_text, reply_markup=markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error generating ideas: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('idea_'))
def handle_idea_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–¥–µ–∏"""
    user_id = call.from_user.id
    
    try:
        idea_index = int(call.data.split('_')[1])
        data = get_user_data(user_id)
        
        if 'ideas' not in data or idea_index >= len(data['ideas']):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–¥–µ–∏")
            return
        
        bot.answer_callback_query(call.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = bot.send_message(
            user_id,
            "‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–¥–µ–∏...</b>\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥ ‚è±Ô∏è",
            parse_mode='HTML'
        )
        
        selected_idea = data['ideas'][idea_index]
        idea_title = selected_idea.get('title', '–ò–¥–µ—è')
        idea_description = selected_idea.get('description', '')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        post = loop.run_until_complete(ai_client.generate_post(
            niche=data['niche'],
            goal=data['goal'],
            content_format=data['format'],
            idea_title=idea_title,
            idea_description=idea_description
        ))
        loop.close()
        
        if not post:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"Failed to generate post for user {user_id}")
            return
        
        logger.info(f"Generated post for user {user_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            bot.delete_message(user_id, processing_msg.message_id)
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        post_text = (
            f"üìù <b>–ì–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç:</b>\n\n"
            f"{post}\n\n"
            f"<i>–ò–¥–µ—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞: {idea_title}</i>"
        )
        
        bot.send_message(user_id, post_text, parse_mode='HTML')
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å reply –∫–Ω–æ–ø–∫–∞–º–∏
        reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        reply_markup.add(types.KeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏"))
        reply_markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–¥–µ—é"))
        
        bot.send_message(user_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error selecting idea: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@bot.callback_query_handler(func=lambda call: call.data == "restart")
def handle_restart(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data_store:
        user_data_store[user_id].clear()
    
    set_user_state(user_id, UserState.WAITING_NICHE)
    
    restart_text = (
        "üéØ <b>–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π!</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É <b>–Ω–∏—à—É</b>:"
    )
    
    bot.send_message(user_id, restart_text, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == "select_other")
def handle_select_other(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–¥–µ–∏"""
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    
    data = get_user_data(user_id)
    
    if 'ideas' not in data:
        bot.send_message(user_id, "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    ideas = data['ideas']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–¥–µ–∏
    ideas_text = "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–¥–µ—é:</b>\n\n"
    for idx, idea in enumerate(ideas[:5], 1):
        title = idea.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = idea.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        ideas_text += f"<b>üí° –ò–¥–µ—è {idx}:</b>\n<i>{title}</i>\n{description}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    for idx in range(min(5, len(ideas))):
        button = types.InlineKeyboardButton(
            f"üí° –ò–¥–µ—è {idx + 1}",
            callback_data=f"idea_{idx}"
        )
        markup.add(button)
    
    set_user_state(user_id, UserState.WAITING_IDEA_SELECTION)
    bot.send_message(user_id, ideas_text, reply_markup=markup, parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text and "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏" in message.text)
def handle_create_new_ideas(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏'"""
    user_id = message.chat.id
    logger.info(f"User {user_id} pressed '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏' button")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data_store:
        user_data_store[user_id].clear()
    
    set_user_state(user_id, UserState.WAITING_NICHE)
    
    restart_text = (
        "üéØ <b>–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π!</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É <b>–Ω–∏—à—É</b>:"
    )
    
    # –£–¥–∞–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardRemove()
    bot.send_message(user_id, restart_text, parse_mode='HTML', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text and "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–¥–µ—é" in message.text)
def handle_select_another_idea(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–¥–µ—é'"""
    user_id = message.chat.id
    logger.info(f"User {user_id} pressed '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–¥–µ—é' button")
    data = get_user_data(user_id)
    
    if 'ideas' not in data:
        bot.send_message(user_id, "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    ideas = data['ideas']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–¥–µ–∏
    ideas_text = "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–¥–µ—é:</b>\n\n"
    for idx, idea in enumerate(ideas[:5], 1):
        title = idea.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = idea.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        ideas_text += f"<b>üí° –ò–¥–µ—è {idx}:</b>\n<i>{title}</i>\n{description}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    for idx in range(min(5, len(ideas))):
        button = types.InlineKeyboardButton(
            f"üí° –ò–¥–µ—è {idx + 1}",
            callback_data=f"idea_{idx}"
        )
        markup.add(button)
    
    set_user_state(user_id, UserState.WAITING_IDEA_SELECTION)
    bot.send_message(user_id, ideas_text, reply_markup=markup, parse_mode='HTML')


@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.chat.id
    
    help_text = (
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "<b>/start</b> - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π\n"
        "<b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "<b>/cancel</b> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n\n"
        "<b>üéØ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>\n"
        "1. –£–∫–∞–∂–∏—Ç–µ –Ω–∏—à—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ 5 –∏–¥–µ–π\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ—é –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç\n\n"
        "<b>üí° –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ù–∏—à–∞: —Ñ–∏—Ç–Ω–µ—Å\n"
        "‚Ä¢ –¶–µ–ª—å: –ø—Ä–∏–≤–ª–µ—á—å –∞—É–¥–∏—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: –ø–æ—Å—Ç –≤ Instagram"
    )
    
    bot.send_message(user_id, help_text, parse_mode='HTML')


@bot.message_handler(commands=['cancel'])
def handle_cancel(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user_id = message.chat.id
    
    if user_id in user_data_store:
        user_data_store[user_id].clear()
    
    bot.send_message(user_id, "‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


@bot.message_handler(func=lambda message: True)
def handle_default(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.chat.id
    state = get_user_state(user_id)
    
    if state is None:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
    else:
        bot.send_message(user_id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.")

# Webhook endpoints
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return '', 403


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    return 'AI-IdeaFactory Bot is running! ü§ñ', 200


@app.route('/health')
def health():
    """Health check endpoint"""
    return 'OK', 200


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è webhook —Ä–µ–∂–∏–º–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    try:
        # Webhook –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ API (–∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
        # curl -X POST "https://api.telegram.org/bot<TOKEN>/setWebhook" \
        #   -H "Content-Type: application/json" \
        #   -d '{"url": "https://<tunnel-url>/<TOKEN>"}'
        
        webhook_url = WEBHOOK_URL_BASE + WEBHOOK_URL_PATH
        logger.info(f"üåê –û–∂–∏–¥–∞–µ–º—ã–π webhook: {webhook_url}")
        logger.info("‚ÑπÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram API")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ webhook!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        app.run(host='0.0.0.0', port=8000, debug=False)
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()

    main()
